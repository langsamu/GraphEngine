// MIT License, Copyright 2020 Samu Lang

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#
    GenerateNamespace();
#>

<#+
private void GenerateNamespace()
{#>
namespace GraphEngine
{
    using System.Diagnostics;
    using VDS.RDF;
    using Linq = System.Linq.Expressions;
<#+
    GenerateClasses();
#>}<#+}

private void GenerateClasses()
{
    foreach(var item in Data)
    {#>

    public class <#= item #> : Binary
    {
        [DebuggerStepThrough]
        internal <#= item #>(INode node) : base(node) {
            this.RdfType = Vocabulary.<#= item #>;
        }

        protected override Linq.ExpressionType LinqBinaryType => Linq.ExpressionType.<#= item #>;
    }
<#+}
}

private IEnumerable<ExpressionType> Data {
    get
    {
        yield return ExpressionType.Add;
        yield return ExpressionType.AddAssign;
        yield return ExpressionType.AddAssignChecked;
        yield return ExpressionType.AddChecked;
        yield return ExpressionType.And;
        yield return ExpressionType.AndAlso;
        yield return ExpressionType.AndAssign;
        yield return ExpressionType.Assign;
        yield return ExpressionType.Coalesce;
        yield return ExpressionType.Divide;
        yield return ExpressionType.DivideAssign;
        yield return ExpressionType.Equal;
        yield return ExpressionType.ExclusiveOr;
        yield return ExpressionType.ExclusiveOrAssign;
        yield return ExpressionType.GreaterThan;
        yield return ExpressionType.GreaterThanOrEqual;
        yield return ExpressionType.LeftShift;
        yield return ExpressionType.LeftShiftAssign;
        yield return ExpressionType.LessThan;
        yield return ExpressionType.LessThanOrEqual;
        yield return ExpressionType.Modulo;
        yield return ExpressionType.ModuloAssign;
        yield return ExpressionType.Multiply;
        yield return ExpressionType.MultiplyAssign;
        yield return ExpressionType.MultiplyAssignChecked;
        yield return ExpressionType.MultiplyChecked;
        yield return ExpressionType.NotEqual;
        yield return ExpressionType.Or;
        yield return ExpressionType.OrAssign;
        yield return ExpressionType.OrElse;
        yield return ExpressionType.Power;
        yield return ExpressionType.PowerAssign;
        yield return ExpressionType.RightShift;
        yield return ExpressionType.RightShiftAssign;
        yield return ExpressionType.Subtract;
        yield return ExpressionType.SubtractAssign;
        yield return ExpressionType.SubtractAssignChecked;
        yield return ExpressionType.SubtractChecked;
    }
}
#>