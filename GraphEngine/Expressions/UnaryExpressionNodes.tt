// MIT License, Copyright 2019 Samu Lang

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#
    GenerateNamespace();
#>

<#+
private void GenerateNamespace()
{#>
namespace GraphEngine
{
    using System.Diagnostics;
    using System.Linq.Expressions;
    using VDS.RDF;
<#+
    GenerateClasses();
#>}<#+}

private void GenerateClasses()
{
    foreach(var item in Data)
    {#>

    public class <#= item #>ExpressionNode : UnaryExpressionNode
    {
        [DebuggerStepThrough]
        internal <#= item #>ExpressionNode(INode node) : base(node) { }

        protected override ExpressionType UnaryType => ExpressionType.<#= item #>;
    }
<#+}
}

private IEnumerable<ExpressionType> Data {
    get
    {
        yield return ExpressionType.ArrayLength;
        yield return ExpressionType.Convert;
        yield return ExpressionType.ConvertChecked;
        yield return ExpressionType.Decrement;
        yield return ExpressionType.Increment;
        yield return ExpressionType.IsFalse;
        yield return ExpressionType.IsTrue;
        yield return ExpressionType.Negate;
        yield return ExpressionType.NegateChecked;
        yield return ExpressionType.Not;
        yield return ExpressionType.OnesComplement;
        yield return ExpressionType.PostDecrementAssign;
        yield return ExpressionType.PostIncrementAssign;
        yield return ExpressionType.PreDecrementAssign;
        yield return ExpressionType.PreIncrementAssign;
        yield return ExpressionType.Quote;
        yield return ExpressionType.Throw;
        yield return ExpressionType.TypeAs;
        yield return ExpressionType.UnaryPlus;
        yield return ExpressionType.Unbox;
    }
}
#>