// MIT License, Copyright 2020 Samu Lang

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#
    GenerateNamespace();
#>

<#+
private void GenerateNamespace()
{#>
namespace GraphEngine;

using System;
using VDS.RDF;

public abstract partial class Expression
{
    private static Expression ParseResource(NodeWithGraph node) => Vocabulary.RdfType.ObjectOf(node) switch
    {
<#+
    GenerateProperties();
#>

        _ => throw new Exception($"unknown type {Vocabulary.RdfType.ObjectOf(node)} on node {node}")
    };
}<#+}

private void GenerateProperties()
{
    foreach(var item in Data)
    {#>
        INode t when t.Equals(Vocabulary.<#= item #>) => new <#= item #>(node),
<#+}
}

private IEnumerable<string> Data {
    get
    {
        yield return "ArrayAccess";
        yield return "ArrayIndex";
        yield return "Block";
        yield return "Binary";
        yield return "Break";
        yield return "Call";
        yield return "ClearDebugInfo";
        yield return "Condition";
        yield return "Constant";
        yield return "Continue";
        yield return "DebugInfo";
        yield return "Default";
        yield return "Dynamic";
        yield return "Empty";
        yield return "Field";
        yield return "Goto";
        yield return "IfThen";
        yield return "IfThenElse";
        yield return "Invoke";
        yield return "Label";
        yield return "Lambda";
        yield return "ListInit";
        yield return "Loop";
        yield return "MemberInit";
        yield return "New";
        yield return "NewArrayBounds";
        yield return "NewArrayInit";
        yield return "Parameter";
        yield return "Property";
        yield return "PropertyOrField";
        yield return "ReferenceEqual";
        yield return "ReferenceNotEqual";
        yield return "Rethrow";
        yield return "Return";
        yield return "RuntimeVariables";
        yield return "Switch";
        yield return "Throw";
        yield return "Try";
        yield return "TypeBinary";
        yield return "Unary";
        yield return "Variable";
    }
}
#>
